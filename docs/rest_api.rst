
REST API documentation
======================

``grano`` exposes most of it's functionality via a web-based programming interface.
The interface communicates mostly using JSON data, and exposes a set of resources, 
such as projects, schemata, entities, and relations.

Before using this API, it is advisable to read the :ref:`techintro`.

Authentication
--------------

Read access to all of ``granos`` functionality is provided without restriction 
or the need for authentication. For write operations, such as creating and editing
datasets and entities, a user will have to provide either a valid session cookie, 
generated by using OAuth against `GitHub <https://github.com>`_, or an 
API key. The API key is available in the user profile page for users which have
logged in.

The API key must be submitted with each request, and it can either be given as the
``api_key`` query parameter, or as the value of the ``Authorization``
request header. When an API key is given, nomenklatura still performs authorization 
checks and return an HTTP 401 error when the credentials are invalid, or an HTTP
403 error, when the user tries to modify objects which he is not authorized to 
write.


Cross-origin requests
---------------------

All API responses can be encoded as JSON with padding (JSON-P) by adding a ``callback``
argument to the request. This will allow remote script inclusion to load data into a 
web site on a different domain. Cross-origin request sharing (CORS) is not currently 
supported.


Pagers
------

All collections of HTTP resources such as datasets or entities provide a similar 
interface that supports pagination by means of limit and offset. A paginated 
response will be a JSON object with the following properties:

* ``results`` is an ordered list of the available HTTP resources, often serialized
  in an abridged (shallow) form to reduce the response size.
* ``count`` gives the overall number of available results, including all available
  pages.
* ``limit`` and ``offset`` give the current state of the pager, indicating the
  number of results that will be returned with each request and the number of
  results to be skipped before returning results, respectively.
* ``next`` and ``previous`` are two URLs that can be used to retrieve the next or
  previous page of results. Both properties can be ``null`` when either no further
  pages are available or the query returned the first page of the result set. Both
  URLs are also returned in the ``Link`` headers of the HTTP response.

Any pager can be modified using the following query parameters:

* ``limit`` sets a limit to the number of resources returned. An maximum of 1000
  resources is enforced, the default is to return 50 resources if no limit has 
  been provided explicitly.
* ``offset`` instructs the pager to skip the given number of initial records before
  beginning to return resources.

